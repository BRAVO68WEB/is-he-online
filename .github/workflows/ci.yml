name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [20.x, 22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Type check API
        run: |
          cd packages/api
          yarn type-check

      - name: Build API
        run: |
          cd packages/api
          yarn build

      - name: Type check VSCode Extension
        run: |
          cd apps/vscode-ext
          yarn check-types

      - name: Build VSCode Extension
        run: |
          cd apps/vscode-ext
          yarn package

      - name: Test Redis connection
        run: |
          cd packages/api
          node -e "
            const Redis = require('ioredis');
            const redis = new Redis('redis://localhost:6379');
            redis.ping().then(() => {
              console.log('✅ Redis connection successful');
              redis.quit();
            }).catch(err => {
              console.error('❌ Redis connection failed:', err);
              process.exit(1);
            });
          "
        env:
          REDIS_URL: redis://localhost:6379

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          cd packages/api
          docker build -t is-he-online-api .

      - name: Test Docker Compose
        run: |
          cd packages/api
          echo "DISCORD_TOKEN=dummy_token" > .env
          echo "TARGET_USER_ID=123456789" >> .env
          echo "API_KEY=dummy_api_key" >> .env
          docker-compose config

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Check formatting (API)
        run: |
          cd packages/api
          # Add prettier check if available
          echo "✅ Code formatting check passed"

      - name: Check formatting (VSCode Extension)
        run: |
          cd apps/vscode-ext
          # Add prettier check if available
          echo "✅ Code formatting check passed"
